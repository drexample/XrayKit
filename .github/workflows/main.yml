name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-12, ubuntu-latest, windows-latest]
    steps:

      - uses: actions/checkout@v3

      # Checkout the secondary repository only on macOS
      - name: Checkout xray repository
        if: runner.os == 'macOS'
        uses: actions/checkout@v3
        with:
          repository: 'romaxa55/xray'
          path: 'xray'

      - name: Setup Go
        uses: actions/setup-go@v3.5.0
        with:
          go-version: '1.23'

      # Setup Gomobile only on macOS
      - name: Setup Gomobile
        if: runner.os == 'macOS'
        run: |
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init

      - name: Build
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            cd xray
            make
            # Verify build output
            if [ -d "./xray.xcframework" ]; then
              zip -ry ../XrayKit.xcframework.zip ./xray.xcframework
            else
              echo "xray.xcframework not found!"
              exit 1
            fi
          elif [ "${{ runner.os }}" == "Linux" ]; then
            echo "Building for Linux..."
            # Replace the following line with your actual Linux build commands
            make linux
            # Example: tar -czvf XrayKit-linux.tar.gz ./build/linux/
          elif [ "${{ runner.os }}" == "Windows" ]; then
            echo "Building for Windows..."
            # Replace the following line with your actual Windows build commands
            make windows
            # Example: Compress-Archive -Path .\build\windows\* -DestinationPath XrayKit-windows.zip
          fi
        shell: /bin/bash -e {0}

      # Verify build output on macOS
      - name: Verify Build Output
        if: runner.os == 'macOS'
        run: |
          ls -la xray

      - name: Render Template
        if: runner.os == 'macOS'
        run: |
          export TEMP=$(shasum -a 256 XrayKit.xcframework.zip | awk '{ print $1 }')
          export CHECKSUM=${TEMP}
          cd Templates
          sed -i "_bak" "s/VERSION/${{ github.event.inputs.version }}/g" Package.template
          sed -i "_bak" "s/CHECKSUM/${CHECKSUM}/g" Package.template

      - name: Update Package.swift
        if: runner.os == 'macOS'
        run: |
          rm -f Package.swift
          cp ./Templates/Package.template Package.swift

      - name: Commit Changes
        if: runner.os == 'macOS'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "XrayKit Release ${{ github.event.inputs.version }}!!!"
          commit_user_name: Arror
          commit_user_email: hallo.maqiang@icloud.com
          tagging_message: "${{ github.event.inputs.version }}"
          file_pattern: 'Package.swift'

      - name: Upload Release (macOS Only)
        if: runner.os == 'macOS'
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          tag_name: "${{ github.event.inputs.version }}"
          files: XrayKit.xcframework.zip

      # Optional: Upload artifacts for other platforms
      - name: Upload Release Artifacts
        if: runner.os != 'macOS'
        uses: actions/upload-artifact@v3
        with:
          name: "XrayKit-${{ runner.os }}"
          path: |
            XrayKit-${{ runner.os }}.tar.gz
            XrayKit-${{ runner.os }}.zip
